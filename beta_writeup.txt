================================================================================
Write-up 1
================================================================================

Number of frames = 4000
---- RESULTS ----
Elapsed execution time: 113.983129s
1262 Line-Wall Collisions
19806 Line-Line Collisions
---- END RESULTS ----


================================================================================
Write-up 2
================================================================================

This is not a problem with quadtrees and can easily be addressed. This line that
passes through multiple quadrants can be passed into each of the leaves. The
leaves will then incorporate this information during collision detection, so
quadtrees should still provide an effective speedup for collision detection.


================================================================================
Write-up 3
================================================================================

Number of frames = 4000
---- RESULTS ----
Elapsed execution time: 10.884734s
1262 Line-Wall Collisions
19806 Line-Line Collisions
---- END RESULTS ----


================================================================================
Write-up 4
================================================================================

The more efficient collision detection ran in 10.88 seconds while the original
implementation ran in 114 seconds. This is a 10x speedup. A larger speedup was
expected, considering the amount of additional time and code, but there are
definitely a few rough areas that could use major optimization. For example,
checking for duplicate entries is not ifficiently implemented, and there is a
reasonable amount of duplicate computation.


================================================================================
Write-up 5
================================================================================

...


================================================================================
Write-up 6
================================================================================

 N     Execution Time
----------------------
 25    14.743758s
 40    10.860574s
 50    10.080458s
 55    9.950865s
 60    9.898966s
*65    9.848825s
 70    10.069617s
 75    10.250410s
 100   10.884734s
 200   15.567572s

It was found that the optimal value of N was 65, which provided a 10% speedup.
Decreasing N from this optimal point increases the execution time because the
overhead of creating new Quadtrees outweights the work done by each Quadtree.
Increasing N from this optimal point increases the execution time because the
amount of work done by each Quadtree is O(N^2).


================================================================================
Write-up 7
================================================================================

...


================================================================================
Write-up 8
================================================================================

...


================================================================================
Write-up 9
================================================================================

...


================================================================================
Write-up 10
================================================================================

...


================================================================================
Write-up 11
================================================================================

...

